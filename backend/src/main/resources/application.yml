# Address of the aplication server (including protocol, domain name, and optionally port number), read from an environmental variable
applicationServer: ${APPLICATION_SERVER:http://localhost}
databaseSchemaHandlingOnStartup: ${DATABASE_SCHEMA_HANDLING_ON_STARTUP:create} #none|validate|update|create
databaseSchemaCreateType: ${DATABASE_SCHEMA_CREATE_TYPE:populate} #populate|initialize


server:
  servlet:
    session:
      cookie:
        http-only: true
        secure: false
      timeout: 30m

# Here we define active profiles
spring:
  data:
    web:
      pageable:
        default-page-size: 1000
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB
  profiles:
    active: secured, postgres

---

spring:
  h2:
    console:
      enabled: true
      path: /h2
      settings:
        trace: false
        web-allow-others: false
  datasource:
    url: jdbc:h2:file:./h2db;TRACE_LEVEL_FILE=0
    username: sa
    password: password
    driverClassName: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create
  config:
    activate:
      on-profile: h2

---

spring:
  datasource:
    url: jdbc:postgresql://${DB_SERVER}/${POSTGRES_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      auto-commit: false
  jpa:
    database: postgresql
    hibernate:
      ddl-auto: ${databaseSchemaHandlingOnStartup}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  config:
    activate:
      on-profile: postgres

---

springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui

spring:
  mail:
    host: ${SMTP_SERVER}
    port: ${SMTP_PORT}
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    protocol: smtp
    properties.mail.smtp:
      auth: true
      starttls.enable: true
