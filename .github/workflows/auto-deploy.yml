name: 🏗️ Docker

on:
  push:
    branches:
      - main

permissions:
  contents: 'read'
  packages: 'write'

jobs:
  build-and-push-image:
    name: 📦 Build and push container image to registry
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase the repo name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # tag event
            type=ref,event=tag
            # pull request event
            type=ref,event=pr

      - name: Build and push container image to registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: 🚀 Deploy to DEV
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
    - name: Lowercase the repo name
      run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ env.IMAGE_NAME }}
        tags: |
          # set latest tag for default branch
          type=raw,value=latest,enable={{is_default_branch}}
          # tag event
          type=ref,event=tag
          # pull request event
          type=ref,event=pr

    - name: Pull image
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.MIKRUS_SSH_SERVER }}
        username: ${{ secrets.MIKRUS_SSH_USER }}
        password: ${{ secrets.MIKRUS_SSH_PASSWORD }}
        port: ${{ secrets.MIKRUS_SSH_PORT }}
        script: |
          cd /reunice
          docker stop "$(docker ps -aq)" -f
          docker system prune -f
          docker pull ${{ steps.meta.outputs.tags }}
          docker run --env-file .env -p 80:8080 -p 443:8080 -d ${{ steps.meta.outputs.tags }}