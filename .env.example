# This file contains configuration of the CMS system, read by docker-compose when starting the application.
# Please read the comments carefully. WARNING! Possible data loss when badly configured!

# URL in the form protocol://host(:port) where the application is running. In case of local deployment, use localhost as host.
#############################################
APP_URL=http://localhost
#############################################

# Type of database schema handling on application startup. Possible values: none|validate|update|create. The meaning of these values is as follows:
# - none - Hibernate does not perform any automatic database schema generation or validation; this is typically used when the application relies on a pre-existing database schema;
# - validate - Hibernate validates the schema with the entity mappings; if there are any inconsistencies between the schema and the mappings, an exception is thrown;
# - update - Hibernate automatically updates the database schema based on the entity mappings; this includes adding or modifying tables, columns, and constraints as necessary,
#          however, it will not delete any columns or tables that are no longer needed;
# - create - Hibernate automatically creates the database schema based on the entity mappings; this includes creating tables, columns, and constraints.
# WARNING! 'create' sets fresh data in the database, overriding persistent state of the database (all tables are dropped and recreated)
#
# The 'create' type database schema handling should be used only during first application run. Once the application is run and Docker Volume created,
# the value should be set to 'validate' or 'update' to prevent data loss in case application is stopped and run again,
# connecting to already existing Docker Volume persisting modified data.
#############################################
DATABASE_SCHEMA_HANDLING_ON_STARTUP=create
#############################################

# Additional setup concerning only the case when DATABASE_SCHEMA_HANDLING_ON_STARTUP=create. Possible values: populate|initialize. The meaning of these values is as follows:
# - populate - database is restored from a zip backup file located in db-resources/restore directory, or,
#              if there is no backup file, it is created from scratch and then initialized with some test (dummy) data;
# - initialize - database is restored from a zip backup file located in db-resources/restore directory, or,
#                if there is no backup file, it is created from scratch and then initialized with only one user being a system administrator
#                (this enables to input all data later using that administrative account).
#
# During first application run the variable should be set either to 'populate' or 'initialize'. It can then remain so.
#############################################
DATABASE_SCHEMA_CREATE_TYPE=populate
#############################################

# Configuration of the database
#############################################
DB_SERVER=postgres
POSTGRES_DB=reunice
POSTGRES_USER=postgres
POSTGRES_PASSWORD=root
#############################################

# Configuration of the smtp server
#############################################
SMTP_SERVER=mailpit
SMTP_PORT=1025
SMTP_USERNAME=test
SMTP_PASSWORD=test
SMTP_USE_AUTH=true
SMTP_USE_TLS=true
#############################################

# Configuration of typesense
#############################################
TYPESENSE_API_KEY=devapikey
TYPESENSE_HOST=typesense
TYPESENSE_CACHE_ENABLED=true
TYPESENSE_CACHE_TTL=60000
TYPESENSE_USE_EMBEDDING=true
#############################################

# Configuration of the file storage
#############################################
UPLOADS_DIRECTORY=./uploads/
BACKUPS_DIRECTORY=./db-resources/
EMAIL_TEMPLATES_DIRECTORY=./emailTemplates/
#############################################